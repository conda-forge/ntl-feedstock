From f92f69da1231d3f3852192b0eb47a108b4327ccb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Fri, 13 Oct 2023 02:39:26 +0300
Subject: [PATCH] Do not run binaries when cross compiling

and use auto-generated code that was created on an M1 manually.
---
 include/NTL/gmp_aux.h   |   3 +
 include/NTL/mach_desc.h | 849 ++++++++++++++++++++++++++++++++++++++++
 src/DoConfig            | 112 +-----
 src/GetPID.cpp          |   9 +
 src/GetTime.cpp         |  17 +
 src/mfile               |  36 +-
 6 files changed, 887 insertions(+), 139 deletions(-)
 create mode 100644 include/NTL/gmp_aux.h
 create mode 100644 include/NTL/mach_desc.h
 create mode 100644 src/GetPID.cpp
 create mode 100644 src/GetTime.cpp

diff --git a/include/NTL/gmp_aux.h b/include/NTL/gmp_aux.h
new file mode 100644
index 0000000..d8f2599
--- /dev/null
+++ b/include/NTL/gmp_aux.h
@@ -0,0 +1,3 @@
+#define NTL_ZZ_NBITS (64)
+#define NTL_BITS_PER_LIMB_T (64)
+#define NTL_ZZ_FRADIX (((double)(1L<<62))*((double)(1L<<2)))
diff --git a/include/NTL/mach_desc.h b/include/NTL/mach_desc.h
new file mode 100644
index 0000000..16b010f
--- /dev/null
+++ b/include/NTL/mach_desc.h
@@ -0,0 +1,849 @@
+#ifndef NTL_mach_desc__H
+#define NTL_mach_desc__H
+
+
+#define NTL_BITS_PER_LONG (64)
+#define NTL_NUMBITS_BPL (7)
+#define NTL_MAX_LONG (9223372036854775807L)
+#define NTL_MAX_INT (2147483647)
+#define NTL_BITS_PER_INT (32)
+#define NTL_BITS_PER_SIZE_T (64)
+#define NTL_ARITH_RIGHT_SHIFT (1)
+#define NTL_NBITS_MAX (50)
+#define NTL_WNBITS_MAX (50)
+#define NTL_DOUBLE_PRECISION (53)
+#define NTL_FDOUBLE_PRECISION (((double)(1L<<52)))
+#define NTL_LONGDOUBLE_OK (0)
+#define NTL_WIDE_DOUBLE_DP ((wide_double(1L<<52)))
+#define NTL_QUAD_FLOAT_SPLIT ((((double)(1L<<27)))+1.0)
+#define NTL_EXT_DOUBLE (0)
+#define NTL_FMA_DETECTED (0)
+#define NTL_BIG_POINTERS (0)
+#define NTL_MIN_LONG (-NTL_MAX_LONG - 1L)
+#define NTL_MIN_INT  (-NTL_MAX_INT - 1)
+
+
+#define NTL_BB_MUL_CODE0 \
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+   t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+   t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+   t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+   t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+   t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+   t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+   t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+   t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+   t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+   t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+   t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+   t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+   t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+   t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+   if (a >> 63) hi ^= ((b & 0xeeeeeeeeeeeeeeeeUL) >> 1);\
+   if ((a >> 62) & 1) hi ^= ((b & 0xccccccccccccccccUL) >> 2);\
+   if ((a >> 61) & 1) hi ^= ((b & 0x8888888888888888UL) >> 3);\
+   c[0] = lo;    c[1] = hi;\
+
+
+
+
+
+#define NTL_BB_MUL_CODE1 \
+   long i;\
+   _ntl_ulong carry = 0, b;\
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      b = bp[i];\
+      lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+      t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+      t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+      t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+      t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+      t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+      t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+      t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+      t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+      t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+      t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+      t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+      t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+      t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+      t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+      if (a >> 63) hi ^= ((b & 0xeeeeeeeeeeeeeeeeUL) >> 1);\
+      if ((a >> 62) & 1) hi ^= ((b & 0xccccccccccccccccUL) >> 2);\
+      if ((a >> 61) & 1) hi ^= ((b & 0x8888888888888888UL) >> 3);\
+      cp[i] = carry ^ lo;    carry = hi;\
+   }\
+   cp[sb] = carry;\
+
+
+
+
+
+#define NTL_BB_MUL_CODE2 \
+   long i;\
+   _ntl_ulong carry = 0, b;\
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      b = bp[i];\
+      lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+      t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+      t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+      t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+      t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+      t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+      t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+      t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+      t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+      t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+      t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+      t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+      t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+      t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+      t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+      if (a >> 63) hi ^= ((b & 0xeeeeeeeeeeeeeeeeUL) >> 1);\
+      if ((a >> 62) & 1) hi ^= ((b & 0xccccccccccccccccUL) >> 2);\
+      if ((a >> 61) & 1) hi ^= ((b & 0x8888888888888888UL) >> 3);\
+      cp[i] ^= (carry ^ lo);    carry = hi;\
+   }\
+   cp[sb] ^= carry;\
+
+
+
+
+
+#define NTL_SHORT_BB_MUL_CODE1 \
+   long i;\
+   _ntl_ulong carry = 0, b;\
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      b = bp[i];\
+      lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+      t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+      t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+      t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+      t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+      t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+      t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+      t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+      t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+      t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+      t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+      t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+      t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+      t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+      t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+      cp[i] = carry ^ lo;    carry = hi;\
+   }\
+   cp[sb] = carry;\
+
+
+
+
+
+#define NTL_HALF_BB_MUL_CODE0 \
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[4];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   lo = A[b & 3]; t = A[(b >> 2) & 3]; hi = t >> 62; lo ^= t << 2;\
+   t = A[(b >> 4) & 3]; hi ^= t >> 60; lo ^= t << 4;\
+   t = A[(b >> 6) & 3]; hi ^= t >> 58; lo ^= t << 6;\
+   t = A[(b >> 8) & 3]; hi ^= t >> 56; lo ^= t << 8;\
+   t = A[(b >> 10) & 3]; hi ^= t >> 54; lo ^= t << 10;\
+   t = A[(b >> 12) & 3]; hi ^= t >> 52; lo ^= t << 12;\
+   t = A[(b >> 14) & 3]; hi ^= t >> 50; lo ^= t << 14;\
+   t = A[(b >> 16) & 3]; hi ^= t >> 48; lo ^= t << 16;\
+   t = A[(b >> 18) & 3]; hi ^= t >> 46; lo ^= t << 18;\
+   t = A[(b >> 20) & 3]; hi ^= t >> 44; lo ^= t << 20;\
+   t = A[(b >> 22) & 3]; hi ^= t >> 42; lo ^= t << 22;\
+   t = A[(b >> 24) & 3]; hi ^= t >> 40; lo ^= t << 24;\
+   t = A[(b >> 26) & 3]; hi ^= t >> 38; lo ^= t << 26;\
+   t = A[(b >> 28) & 3]; hi ^= t >> 36; lo ^= t << 28;\
+   t = A[b >> 30]; hi ^= t >> 34; lo ^= t << 30;\
+   if (a >> 63) hi ^= ((b & 0xaaaaaaaaUL) >> 1);\
+   c[0] = lo;    c[1] = hi;\
+
+
+
+
+
+#define NTL_ALT_BB_MUL_CODE0 \
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   const _ntl_ulong t4 = A[(b >> 4) & 15]; \
+   const _ntl_ulong t8 = A[(b >> 8) & 15]; \
+   const _ntl_ulong t12 = A[(b >> 12) & 15]; \
+   const _ntl_ulong t16 = A[(b >> 16) & 15]; \
+   const _ntl_ulong t20 = A[(b >> 20) & 15]; \
+   const _ntl_ulong t24 = A[(b >> 24) & 15]; \
+   const _ntl_ulong t28 = A[(b >> 28) & 15]; \
+   const _ntl_ulong t32 = A[(b >> 32) & 15]; \
+   const _ntl_ulong t36 = A[(b >> 36) & 15]; \
+   const _ntl_ulong t40 = A[(b >> 40) & 15]; \
+   const _ntl_ulong t44 = A[(b >> 44) & 15]; \
+   const _ntl_ulong t48 = A[(b >> 48) & 15]; \
+   const _ntl_ulong t52 = A[(b >> 52) & 15]; \
+   const _ntl_ulong t56 = A[(b >> 56) & 15]; \
+   const _ntl_ulong t60 = A[b >> 60]; \
+   const _ntl_ulong lo = A[b & 15] \
+      ^ (t4 << 4)\
+      ^ (t8 << 8)\
+      ^ (t12 << 12)\
+      ^ (t16 << 16)\
+      ^ (t20 << 20)\
+      ^ (t24 << 24)\
+      ^ (t28 << 28)\
+      ^ (t32 << 32)\
+      ^ (t36 << 36)\
+      ^ (t40 << 40)\
+      ^ (t44 << 44)\
+      ^ (t48 << 48)\
+      ^ (t52 << 52)\
+      ^ (t56 << 56)\
+      ^ (t60 << 60);\
+   const _ntl_ulong hi = (t4 >> 60)\
+      ^ (t8 >> 56)\
+      ^ (t12 >> 52)\
+      ^ (t16 >> 48)\
+      ^ (t20 >> 44)\
+      ^ (t24 >> 40)\
+      ^ (t28 >> 36)\
+      ^ (t32 >> 32)\
+      ^ (t36 >> 28)\
+      ^ (t40 >> 24)\
+      ^ (t44 >> 20)\
+      ^ (t48 >> 16)\
+      ^ (t52 >> 12)\
+      ^ (t56 >> 8)\
+      ^ (t60 >> 4)\
+      ^ (((b & 0xeeeeeeeeeeeeeeeeUL) >> 1) & (-(a >> 63)))\
+      ^ (((b & 0xccccccccccccccccUL) >> 2) & (-((a >> 62) & 1UL)))\
+      ^ (((b & 0x8888888888888888UL) >> 3) & (-((a >> 61) & 1UL)));\
+   c[0] = lo;    c[1] = hi;\
+
+
+
+
+
+#define NTL_ALT_BB_MUL_CODE1 \
+   long i;\
+   _ntl_ulong carry = 0;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      const _ntl_ulong b = bp[i];\
+      const _ntl_ulong t4 = A[(b >> 4) & 15]; \
+      const _ntl_ulong t8 = A[(b >> 8) & 15]; \
+      const _ntl_ulong t12 = A[(b >> 12) & 15]; \
+      const _ntl_ulong t16 = A[(b >> 16) & 15]; \
+      const _ntl_ulong t20 = A[(b >> 20) & 15]; \
+      const _ntl_ulong t24 = A[(b >> 24) & 15]; \
+      const _ntl_ulong t28 = A[(b >> 28) & 15]; \
+      const _ntl_ulong t32 = A[(b >> 32) & 15]; \
+      const _ntl_ulong t36 = A[(b >> 36) & 15]; \
+      const _ntl_ulong t40 = A[(b >> 40) & 15]; \
+      const _ntl_ulong t44 = A[(b >> 44) & 15]; \
+      const _ntl_ulong t48 = A[(b >> 48) & 15]; \
+      const _ntl_ulong t52 = A[(b >> 52) & 15]; \
+      const _ntl_ulong t56 = A[(b >> 56) & 15]; \
+      const _ntl_ulong t60 = A[b >> 60]; \
+      const _ntl_ulong lo = A[b & 15] \
+         ^ (t4 << 4)\
+         ^ (t8 << 8)\
+         ^ (t12 << 12)\
+         ^ (t16 << 16)\
+         ^ (t20 << 20)\
+         ^ (t24 << 24)\
+         ^ (t28 << 28)\
+         ^ (t32 << 32)\
+         ^ (t36 << 36)\
+         ^ (t40 << 40)\
+         ^ (t44 << 44)\
+         ^ (t48 << 48)\
+         ^ (t52 << 52)\
+         ^ (t56 << 56)\
+         ^ (t60 << 60);\
+      const _ntl_ulong hi = (t4 >> 60)\
+         ^ (t8 >> 56)\
+         ^ (t12 >> 52)\
+         ^ (t16 >> 48)\
+         ^ (t20 >> 44)\
+         ^ (t24 >> 40)\
+         ^ (t28 >> 36)\
+         ^ (t32 >> 32)\
+         ^ (t36 >> 28)\
+         ^ (t40 >> 24)\
+         ^ (t44 >> 20)\
+         ^ (t48 >> 16)\
+         ^ (t52 >> 12)\
+         ^ (t56 >> 8)\
+         ^ (t60 >> 4)\
+         ^ (((b & 0xeeeeeeeeeeeeeeeeUL) >> 1) & (-(a >> 63)))\
+         ^ (((b & 0xccccccccccccccccUL) >> 2) & (-((a >> 62) & 1UL)))\
+         ^ (((b & 0x8888888888888888UL) >> 3) & (-((a >> 61) & 1UL)));\
+      cp[i] = carry ^ lo;    carry = hi;\
+   }\
+   cp[sb] = carry;\
+
+
+
+
+
+#define NTL_ALT_BB_MUL_CODE2 \
+   long i;\
+   _ntl_ulong carry = 0;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      const _ntl_ulong b = bp[i];\
+      const _ntl_ulong t4 = A[(b >> 4) & 15]; \
+      const _ntl_ulong t8 = A[(b >> 8) & 15]; \
+      const _ntl_ulong t12 = A[(b >> 12) & 15]; \
+      const _ntl_ulong t16 = A[(b >> 16) & 15]; \
+      const _ntl_ulong t20 = A[(b >> 20) & 15]; \
+      const _ntl_ulong t24 = A[(b >> 24) & 15]; \
+      const _ntl_ulong t28 = A[(b >> 28) & 15]; \
+      const _ntl_ulong t32 = A[(b >> 32) & 15]; \
+      const _ntl_ulong t36 = A[(b >> 36) & 15]; \
+      const _ntl_ulong t40 = A[(b >> 40) & 15]; \
+      const _ntl_ulong t44 = A[(b >> 44) & 15]; \
+      const _ntl_ulong t48 = A[(b >> 48) & 15]; \
+      const _ntl_ulong t52 = A[(b >> 52) & 15]; \
+      const _ntl_ulong t56 = A[(b >> 56) & 15]; \
+      const _ntl_ulong t60 = A[b >> 60]; \
+      const _ntl_ulong lo = A[b & 15] \
+         ^ (t4 << 4)\
+         ^ (t8 << 8)\
+         ^ (t12 << 12)\
+         ^ (t16 << 16)\
+         ^ (t20 << 20)\
+         ^ (t24 << 24)\
+         ^ (t28 << 28)\
+         ^ (t32 << 32)\
+         ^ (t36 << 36)\
+         ^ (t40 << 40)\
+         ^ (t44 << 44)\
+         ^ (t48 << 48)\
+         ^ (t52 << 52)\
+         ^ (t56 << 56)\
+         ^ (t60 << 60);\
+      const _ntl_ulong hi = (t4 >> 60)\
+         ^ (t8 >> 56)\
+         ^ (t12 >> 52)\
+         ^ (t16 >> 48)\
+         ^ (t20 >> 44)\
+         ^ (t24 >> 40)\
+         ^ (t28 >> 36)\
+         ^ (t32 >> 32)\
+         ^ (t36 >> 28)\
+         ^ (t40 >> 24)\
+         ^ (t44 >> 20)\
+         ^ (t48 >> 16)\
+         ^ (t52 >> 12)\
+         ^ (t56 >> 8)\
+         ^ (t60 >> 4)\
+         ^ (((b & 0xeeeeeeeeeeeeeeeeUL) >> 1) & (-(a >> 63)))\
+         ^ (((b & 0xccccccccccccccccUL) >> 2) & (-((a >> 62) & 1UL)))\
+         ^ (((b & 0x8888888888888888UL) >> 3) & (-((a >> 61) & 1UL)));\
+      cp[i] ^= (carry ^ lo);    carry = hi;\
+   }\
+   cp[sb] ^= carry;\
+
+
+
+
+
+#define NTL_ALT_SHORT_BB_MUL_CODE1 \
+   long i;\
+   _ntl_ulong carry = 0;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      const _ntl_ulong b = bp[i];\
+      const _ntl_ulong t4 = A[(b >> 4) & 15]; \
+      const _ntl_ulong t8 = A[(b >> 8) & 15]; \
+      const _ntl_ulong t12 = A[(b >> 12) & 15]; \
+      const _ntl_ulong t16 = A[(b >> 16) & 15]; \
+      const _ntl_ulong t20 = A[(b >> 20) & 15]; \
+      const _ntl_ulong t24 = A[(b >> 24) & 15]; \
+      const _ntl_ulong t28 = A[(b >> 28) & 15]; \
+      const _ntl_ulong t32 = A[(b >> 32) & 15]; \
+      const _ntl_ulong t36 = A[(b >> 36) & 15]; \
+      const _ntl_ulong t40 = A[(b >> 40) & 15]; \
+      const _ntl_ulong t44 = A[(b >> 44) & 15]; \
+      const _ntl_ulong t48 = A[(b >> 48) & 15]; \
+      const _ntl_ulong t52 = A[(b >> 52) & 15]; \
+      const _ntl_ulong t56 = A[(b >> 56) & 15]; \
+      const _ntl_ulong t60 = A[b >> 60]; \
+      const _ntl_ulong lo = A[b & 15] \
+         ^ (t4 << 4)\
+         ^ (t8 << 8)\
+         ^ (t12 << 12)\
+         ^ (t16 << 16)\
+         ^ (t20 << 20)\
+         ^ (t24 << 24)\
+         ^ (t28 << 28)\
+         ^ (t32 << 32)\
+         ^ (t36 << 36)\
+         ^ (t40 << 40)\
+         ^ (t44 << 44)\
+         ^ (t48 << 48)\
+         ^ (t52 << 52)\
+         ^ (t56 << 56)\
+         ^ (t60 << 60);\
+      const _ntl_ulong hi = (t4 >> 60)\
+         ^ (t8 >> 56)\
+         ^ (t12 >> 52)\
+         ^ (t16 >> 48)\
+         ^ (t20 >> 44)\
+         ^ (t24 >> 40)\
+         ^ (t28 >> 36)\
+         ^ (t32 >> 32)\
+         ^ (t36 >> 28)\
+         ^ (t40 >> 24)\
+         ^ (t44 >> 20)\
+         ^ (t48 >> 16)\
+         ^ (t52 >> 12)\
+         ^ (t56 >> 8)\
+         ^ (t60 >> 4);\
+      cp[i] = carry ^ lo;    carry = hi;\
+   }\
+   cp[sb] = carry;\
+
+
+
+
+
+#define NTL_ALT_HALF_BB_MUL_CODE0 \
+   _ntl_ulong A[4];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   const _ntl_ulong t2 = A[(b >> 2) & 3]; \
+   const _ntl_ulong t4 = A[(b >> 4) & 3]; \
+   const _ntl_ulong t6 = A[(b >> 6) & 3]; \
+   const _ntl_ulong t8 = A[(b >> 8) & 3]; \
+   const _ntl_ulong t10 = A[(b >> 10) & 3]; \
+   const _ntl_ulong t12 = A[(b >> 12) & 3]; \
+   const _ntl_ulong t14 = A[(b >> 14) & 3]; \
+   const _ntl_ulong t16 = A[(b >> 16) & 3]; \
+   const _ntl_ulong t18 = A[(b >> 18) & 3]; \
+   const _ntl_ulong t20 = A[(b >> 20) & 3]; \
+   const _ntl_ulong t22 = A[(b >> 22) & 3]; \
+   const _ntl_ulong t24 = A[(b >> 24) & 3]; \
+   const _ntl_ulong t26 = A[(b >> 26) & 3]; \
+   const _ntl_ulong t28 = A[(b >> 28) & 3]; \
+   const _ntl_ulong t30 = A[b >> 30]; \
+   const _ntl_ulong lo = A[b & 3] \
+      ^ (t2 << 2)\
+      ^ (t4 << 4)\
+      ^ (t6 << 6)\
+      ^ (t8 << 8)\
+      ^ (t10 << 10)\
+      ^ (t12 << 12)\
+      ^ (t14 << 14)\
+      ^ (t16 << 16)\
+      ^ (t18 << 18)\
+      ^ (t20 << 20)\
+      ^ (t22 << 22)\
+      ^ (t24 << 24)\
+      ^ (t26 << 26)\
+      ^ (t28 << 28)\
+      ^ (t30 << 30);\
+   const _ntl_ulong hi = (t2 >> 62)\
+      ^ (t4 >> 60)\
+      ^ (t6 >> 58)\
+      ^ (t8 >> 56)\
+      ^ (t10 >> 54)\
+      ^ (t12 >> 52)\
+      ^ (t14 >> 50)\
+      ^ (t16 >> 48)\
+      ^ (t18 >> 46)\
+      ^ (t20 >> 44)\
+      ^ (t22 >> 42)\
+      ^ (t24 >> 40)\
+      ^ (t26 >> 38)\
+      ^ (t28 >> 36)\
+      ^ (t30 >> 34)\
+      ^ (((b & 0xaaaaaaaaUL) >> 1) & (-(a >> 63)));\
+   c[0] = lo;    c[1] = hi;\
+
+
+
+
+
+#define NTL_ALT1_BB_MUL_CODE0 \
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+   t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+   t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+   t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+   t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+   t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+   t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+   t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+   t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+   t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+   t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+   t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+   t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+   t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+   t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+   hi ^= (((b & 0xeeeeeeeeeeeeeeeeUL) >> 1) & (-(a >> 63)))\
+      ^ (((b & 0xccccccccccccccccUL) >> 2) & (-((a >> 62) & 1UL)))\
+      ^ (((b & 0x8888888888888888UL) >> 3) & (-((a >> 61) & 1UL)));\
+   c[0] = lo;    c[1] = hi;\
+
+
+
+
+
+#define NTL_ALT1_BB_MUL_CODE1 \
+   long i;\
+   _ntl_ulong carry = 0, b;\
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      b = bp[i];\
+      lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+      t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+      t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+      t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+      t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+      t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+      t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+      t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+      t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+      t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+      t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+      t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+      t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+      t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+      t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+      hi ^= (((b & 0xeeeeeeeeeeeeeeeeUL) >> 1) & (-(a >> 63)))\
+         ^ (((b & 0xccccccccccccccccUL) >> 2) & (-((a >> 62) & 1UL)))\
+         ^ (((b & 0x8888888888888888UL) >> 3) & (-((a >> 61) & 1UL)));\
+      cp[i] = carry ^ lo;    carry = hi;\
+   }\
+   cp[sb] = carry;\
+
+
+
+
+
+#define NTL_ALT1_BB_MUL_CODE2 \
+   long i;\
+   _ntl_ulong carry = 0, b;\
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      b = bp[i];\
+      lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+      t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+      t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+      t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+      t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+      t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+      t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+      t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+      t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+      t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+      t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+      t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+      t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+      t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+      t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+      hi ^= (((b & 0xeeeeeeeeeeeeeeeeUL) >> 1) & (-(a >> 63)))\
+         ^ (((b & 0xccccccccccccccccUL) >> 2) & (-((a >> 62) & 1UL)))\
+         ^ (((b & 0x8888888888888888UL) >> 3) & (-((a >> 61) & 1UL)));\
+      cp[i] ^= (carry ^ lo);    carry = hi;\
+   }\
+   cp[sb] ^= carry;\
+
+
+
+
+
+#define NTL_ALT1_SHORT_BB_MUL_CODE1 \
+   long i;\
+   _ntl_ulong carry = 0, b;\
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[16];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   A[4] = A[2] << 1;\
+   A[5] = A[4] ^ A[1];\
+   A[6] = A[3] << 1;\
+   A[7] = A[6] ^ A[1];\
+   A[8] = A[4] << 1;\
+   A[9] = A[8] ^ A[1];\
+   A[10] = A[5] << 1;\
+   A[11] = A[10] ^ A[1];\
+   A[12] = A[6] << 1;\
+   A[13] = A[12] ^ A[1];\
+   A[14] = A[7] << 1;\
+   A[15] = A[14] ^ A[1];\
+   for (i = 0; i < sb; i++) {\
+      b = bp[i];\
+      lo = A[b & 15]; t = A[(b >> 4) & 15]; hi = t >> 60; lo ^= t << 4;\
+      t = A[(b >> 8) & 15]; hi ^= t >> 56; lo ^= t << 8;\
+      t = A[(b >> 12) & 15]; hi ^= t >> 52; lo ^= t << 12;\
+      t = A[(b >> 16) & 15]; hi ^= t >> 48; lo ^= t << 16;\
+      t = A[(b >> 20) & 15]; hi ^= t >> 44; lo ^= t << 20;\
+      t = A[(b >> 24) & 15]; hi ^= t >> 40; lo ^= t << 24;\
+      t = A[(b >> 28) & 15]; hi ^= t >> 36; lo ^= t << 28;\
+      t = A[(b >> 32) & 15]; hi ^= t >> 32; lo ^= t << 32;\
+      t = A[(b >> 36) & 15]; hi ^= t >> 28; lo ^= t << 36;\
+      t = A[(b >> 40) & 15]; hi ^= t >> 24; lo ^= t << 40;\
+      t = A[(b >> 44) & 15]; hi ^= t >> 20; lo ^= t << 44;\
+      t = A[(b >> 48) & 15]; hi ^= t >> 16; lo ^= t << 48;\
+      t = A[(b >> 52) & 15]; hi ^= t >> 12; lo ^= t << 52;\
+      t = A[(b >> 56) & 15]; hi ^= t >> 8; lo ^= t << 56;\
+      t = A[b >> 60]; hi ^= t >> 4; lo ^= t << 60;\
+      cp[i] = carry ^ lo;    carry = hi;\
+   }\
+   cp[sb] = carry;\
+
+
+
+
+
+#define NTL_ALT1_HALF_BB_MUL_CODE0 \
+   _ntl_ulong hi, lo, t;\
+   _ntl_ulong A[4];\
+   A[0] = 0;\
+   A[1] = a;\
+   A[2] = A[1] << 1;\
+   A[3] = A[2] ^ A[1];\
+   lo = A[b & 3]; t = A[(b >> 2) & 3]; hi = t >> 62; lo ^= t << 2;\
+   t = A[(b >> 4) & 3]; hi ^= t >> 60; lo ^= t << 4;\
+   t = A[(b >> 6) & 3]; hi ^= t >> 58; lo ^= t << 6;\
+   t = A[(b >> 8) & 3]; hi ^= t >> 56; lo ^= t << 8;\
+   t = A[(b >> 10) & 3]; hi ^= t >> 54; lo ^= t << 10;\
+   t = A[(b >> 12) & 3]; hi ^= t >> 52; lo ^= t << 12;\
+   t = A[(b >> 14) & 3]; hi ^= t >> 50; lo ^= t << 14;\
+   t = A[(b >> 16) & 3]; hi ^= t >> 48; lo ^= t << 16;\
+   t = A[(b >> 18) & 3]; hi ^= t >> 46; lo ^= t << 18;\
+   t = A[(b >> 20) & 3]; hi ^= t >> 44; lo ^= t << 20;\
+   t = A[(b >> 22) & 3]; hi ^= t >> 42; lo ^= t << 22;\
+   t = A[(b >> 24) & 3]; hi ^= t >> 40; lo ^= t << 24;\
+   t = A[(b >> 26) & 3]; hi ^= t >> 38; lo ^= t << 26;\
+   t = A[(b >> 28) & 3]; hi ^= t >> 36; lo ^= t << 28;\
+   t = A[b >> 30]; hi ^= t >> 34; lo ^= t << 30;\
+   hi ^= (((b & 0xaaaaaaaaUL) >> 1) & (-(a >> 63)));\
+   c[0] = lo;    c[1] = hi;\
+
+
+
+#define NTL_BB_MUL1_BITS (4)
+
+
+
+#define NTL_BB_SQR_CODE \
+lo=sqrtab[a&255];\
+lo=lo|(sqrtab[(a>>8)&255]<<16);\
+lo=lo|(sqrtab[(a>>16)&255]<<32);\
+lo=lo|(sqrtab[(a>>24)&255]<<48);\
+hi=sqrtab[(a>>32)&255];\
+hi=hi|(sqrtab[(a>>40)&255]<<16);\
+hi=hi|(sqrtab[(a>>48)&255]<<32);\
+hi=hi|(sqrtab[(a>>56)&255]<<48);\
+
+
+
+
+#define NTL_BB_REV_CODE (revtab[(a>>0)&255]<<56)\
+|(revtab[(a>>8)&255]<<48)\
+|(revtab[(a>>16)&255]<<40)\
+|(revtab[(a>>24)&255]<<32)\
+|(revtab[(a>>32)&255]<<24)\
+|(revtab[(a>>40)&255]<<16)\
+|(revtab[(a>>48)&255]<<8)\
+|(revtab[(a>>56)&255]<<0)
+
+#endif
+
diff --git a/src/DoConfig b/src/DoConfig
index f6ea3d0..77efa2c 100644
--- a/src/DoConfig
+++ b/src/DoConfig
@@ -636,23 +636,11 @@ unlink "need-to-run-configure";
 #   used to set floating point flags intelligently
 GenFiles();
 CopyFiles();
-RemoveProg("GenConfigInfo");
-system("echo '*** building GenConfigInfo' >> CompilerOutput.log");
 
-if(system("$MakeSub{'MAKE_PROG'} GenConfigInfo >> CompilerOutput.log 2>&1")) { 
-   print("Compilation failed\n");
-   print("See CompilerOutput.log for details\n");
-   die "Goodbye!";
-}
-
-my $config_info = `./GenConfigInfo`;
-
-my ($compiler_name, $language_standard, $cpu_type, $os_name);
-($compiler_name, $language_standard, $cpu_type, $os_name) =
-   ($config_info =~ /\((.*?),(.*?),(.*?),(.*?)\)/) or die "Error: GenConfigInfo failed";
-
-# convert to number
-$language_standard += 0 or Warning("__cplusplus not correctly defined");
+my $compiler_name = "clang";
+my $language_standard = 2017;
+my $cpu_type = "unknown";
+my $os_name = "macos";
 
 print("compiler_name=$compiler_name\n");
 print("language_standard=$language_standard\n");
@@ -701,98 +689,6 @@ if ($native_flag) {
    CheckFlag('-march=native');
 }
 
-# disable floating-point optimizations that are not value safe
-# for most compilers, the default at optimzation  '-O2' is to 
-# disable such optimizations. icc is the big exception,
-# so we compile all of NTL with the "-fp-model precise" flag.
-# On older IA-32 machines, this also has the effect of preventing
-# calculations in "extended double" precision.
-
-if ($compiler_name eq 'icc') {
-   CheckFlag('-fp-model precise');
-}
-
-
-# logic to disable floating-point contractions (FMA) in quad_float.cpp.
-# This is an issue on machines with FMA instructions.
-# By default, gcc and icc allow contractions, while clang does not.
-
-sub CheckContract {
-   return Exec("CheckContract");
-}
-
-# on success, returns 1 and leaves flag set
-sub FixContract {
-   my ($flag) = @_;
-   print "*** checking $flag flag\n";
-   system("echo '*** checking $flag flag' >> CompilerOutput.log");
-   $MakeSub{'NOCONTRACT'} = $flag . ' ' . '-DNTL_CONTRACTION_FIXED';
-
-   my $result = CheckContract();
-   if ($result) {
-      print "   $flag works\n";
-   }
-   else {
-      print "   $flag does not work\n";
-      $MakeSub{'NOCONTRACT'} = '';
-   }
-   return $result;
-}
-
-
-if (!CheckContract()) {
-   if (exists($Variable{'NOCONTRACT'})) {
-      Warning("cannot disable floating point contraction");
-   } 
-   elsif ($compiler_name eq 'gcc') {
-      FixContract('-ffp-contract=off') ||
-      FixContract('-mno-fused-madd') || # obsolete, but may work on older gcc's
-      Warning("cannot disable floating point contraction");
-   } 
-   elsif ($compiler_name eq 'clang') {
-      # this really should not be necessary with clang: the default
-      # is no contractions 
-      FixContract('-ffp-contract=off') ||
-      Warning("cannot disable floating point contraction");
-   }
-   elsif ($compiler_name eq 'icc') {
-      # defining NTL_FP_CONTRACT_OFF will make the source
-      # code use the pragma fp_contract(off)
-      FixContract('-DNTL_FP_CONTRACT_OFF') ||
-      Warning("cannot disable floating point contraction");
-   }
-   else {
-      Warning("cannot disable floating point contraction");
-   }
-}
-
-# logic to check that threads and TLS are working...enable NTL_TLS_HACK 
-# if necessary
-
-sub CheckThreads {
-   return Exec("CheckThreads");
-}
-
-if ($ConfigSub{'NTL_THREADS'}) {
-
-   if (CheckThreads()) {
-      print "*** threads are OK \n";
-   }
-   else {
-      if ($ConfigSub{'NTL_TLS_HACK'} == 0) { die "Error: threads are broken"; }
-      $ConfigSub{'NTL_TLS_HACK'} = 0;
-      if (CheckThreads()) {
-         print "*** threads are OK with NTL_TLS_HACK=off\n";
-      }
-      else {
-         die "Error: threads are broken";
-      }
-   }
-
-}
-
-
-
 
 GenFiles();
 CopyFiles();
diff --git a/src/GetPID.cpp b/src/GetPID.cpp
new file mode 100644
index 0000000..dc332f1
--- /dev/null
+++ b/src/GetPID.cpp
@@ -0,0 +1,9 @@
+
+#include <sys/types.h>
+#include <unistd.h>
+
+unsigned long _ntl_GetPID()
+{
+   return getpid();
+}
+
diff --git a/src/GetTime.cpp b/src/GetTime.cpp
new file mode 100644
index 0000000..70d8f72
--- /dev/null
+++ b/src/GetTime.cpp
@@ -0,0 +1,17 @@
+#include <sys/time.h>
+#include <sys/resource.h>
+
+// FIXME: it would be nice to have a per-thread
+// timing function, but it seems very difficult
+// to get a cross-platform solution to this.
+
+
+double _ntl_GetTime()
+{
+   struct rusage used;
+
+   getrusage(RUSAGE_SELF, &used);
+   return (used.ru_utime.tv_sec + used.ru_stime.tv_sec +
+      (used.ru_utime.tv_usec + used.ru_stime.tv_usec) / 1e6);
+}
+
diff --git a/src/mfile b/src/mfile
index 1c704d0..e2c3a32 100644
--- a/src/mfile
+++ b/src/mfile
@@ -329,42 +329,17 @@ setup-phase: need-to-run-configure
 	touch setup-phase
 
 
-# setup1 generates the file ../incluse/NTL/mach_desc.h
-
 setup1: 
-	$(COMPILE) MakeDescAux.cpp
-	$(LINK) -o MakeDesc MakeDesc.cpp MakeDescAux.o $(LDLIBS)
-	./MakeDesc
-	mv mach_desc.h ../include/NTL/mach_desc.h
-
-
-# setup2 does some dynamic checks for GetTime, GetPID, and other features
+  echo "Not generating mach_desc.h during cross-compilation"
 
 setup2:
-	echo "*** CheckFeatures log ***" > CheckFeatures.log
-	sh MakeGetTime "$(LINK)" "$(LDLIBS)"
-	sh MakeGetPID  "$(LINK)" "$(LDLIBS)"
-	sh MakeCheckFeatures "$(FEATURES)" "$(LINK)" "$(LDLIBS)"
-
-# NOTE: to add a feature XXX:
-#   * add a program CheckXXX.cpp which returns 0 if XXX works, -1 otherwise
-#   * add XXX to the FEATURES variable
-
-# setup3 generates the file ../include/NTL/gmp_aux.h
-# The file ../include/NTL/gmp_aux.h is included in ../include/NTL/lip.h
-# when NTL_GMP_LIP is set.
-# When this flag is not set, an empty files produced.
-# This also checks that the right version of gf2x library.
+  echo "Not checking features during cross-compilation"
 
 setup3:
-	$(LINK) $(GMP_OPT_INCDIR) -o gen_gmp_aux gen_gmp_aux.cpp $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(LDLIBS)
-	./gen_gmp_aux > ../include/NTL/gmp_aux.h 
-	$(LINK) $(GF2X_OPT_INCDIR) -o gf2x_version_1_2_or_later_required gf2x_version_1_2_or_later_required.cpp $(GF2X_OPT_LIBDIR) $(GF2X_OPT_LIB) $(LDLIBS) 
-
-# setup4 runs the wizard
+  echo "Not generating gmp_aux.h during cross-compilation"
 
 setup4:
-	sh Wizard $(WIZARD) "$(MAKE)" "$(FEATURES)"
+  echo "Not running wizard during cross-compilation"
 
 
 ntl.a:	$(OBJ) 
@@ -474,9 +449,8 @@ uninstall:
 #################################################################
 
 clobber:	
-	rm -f ntl.a mach_desc.h ../include/NTL/mach_desc.h  GetTime.cpp GetPID.cpp
+	rm -f ntl.a mach_desc.h GetTime.cpp GetPID.cpp
 	sh ResetFeatures '..' "$(FEATURES)" 
-	rm -f ../include/NTL/gmp_aux.h
 	sh RemoveProg $(PROGS) MakeDesc $(AUXPROGS) gen_gmp_aux gf2x_version_1_2_or_later_required
 	rm -f *.o
 	rm -rf small
-- 
2.42.0

